Here are the list of the keywords that I have used so far in my python journey:

* Def: keyword used to define a function.
*If: Used to write a conditional code block
*True: An instance of bool class
*False: An instance of bool class
*from: clause to import class from module
*or: Boolean operator
*continue: Used in the nested for and while loop. It continues with the next cycle of the nearest enclosing loop.
*import: The import statement is used to import modules and classes into our program.
*return: The return statement is used in the function to return a value.
*as: This is used to provide name for import, except, and with statement.
*else: The else statement is used with if-elif conditions. It is used to execute statements when none of the earlier conditions are True.
*elif:The elif statement is always used with if statement for “else if” operation.
*in: Python in keyword is used to test membership.
*break: The break statement is used with nested “for” and “while” loops. It stops the current loop execution and passes the control to the start of the loop.
*Python for keyword is used to iterate over the elements of a sequence or iterable object.
*and: A logical operator

Below are some of the modules I have worked with in python so far:
*sys: The sys module in Python provides various functions and variables that are used to manipulate different parts of the Python runtime environment
*numpy: NumPy is a Python library used for working with arrays. It also has functions for working in domain of linear algebra, fourier transform, and matrices.
*Math: Python has a built-in module that you can use for mathematical tasks. The math module has a set of methods and constants. Numpy stands for numerical python


Below are some symbols I have worked in python so far
*asteriks(star) operator: The asterisk (star) operator is used in Python with more than one meaning attached to it.
For numeric data types, * is used as multiplication operator
For sequences such as string, list and tuple,  * is a repetition operator
Single asterisk as used in function declaration allows variable number of arguments passed from calling environment. Inside the function it behaves as a tuple.
It can also be used to import all the packages in a module

*plus(+): Used to add to numbers or concatenate two string
*minus(-): Used to subtract numbers
*Division(/): Used to divide two numbers
*Modulus(%): Used to find the remainder when a number divides the other
*(<):Less than
*(>): Greater than
*(<=):Less than or equal to
*(>=): Greater than or equal to
*(==): Equal to
*(=): Assignment operator
*(!=): Not equal to
*(a+=b): Increase the variable "a" by the number "b"
*{}: set
*[]: list
*(): Tuple
And many more

Funtions that I have worked with so far
*print(): Top print a given expression to the standard output device
*range(): Returns a sequence of numbers, starting from 0 and increments by 1 (by default)
*set(): Returns a new set object
*tuple(): Returns a tuple
*type(): Returns the type of object
*float(): Returns a floating point number
*format(): Formats a specified value
*input(): Alows user input
*id(): Returns the id of an object
*int(): Returns an integer number
*len(): Rewturns the lenght of an object
*list(): Returns a list
*max(): Returns the largest item in an iteration
*min(): Returns the smallest item in an iteration
